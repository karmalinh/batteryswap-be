package BatterySwapStation.service;

import BatterySwapStation.dto.SwapRequest;
import BatterySwapStation.dto.SwapResponseDTO;
import BatterySwapStation.entity.*;
import BatterySwapStation.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.context.ApplicationContext;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

@Service
@RequiredArgsConstructor
public class SwapService {
    @Autowired
    private ApplicationContext context;
    private final SwapRepository swapRepository;
    private final BookingRepository bookingRepository;
    private final BatteryRepository batteryRepository;
    private final DockSlotRepository dockSlotRepository;
    private final StaffAssignRepository staffAssignRepository;

    // ====================== CANCEL SWAP ======================
    // ====================== CANCEL SWAP BY BOOKING ======================
    @Transactional
    public Object cancelSwapByBooking(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y booking #" + bookingId));

        Swap swap = swapRepository.findTopByBooking_BookingIdOrderBySwapIdDesc(bookingId)
                .orElse(null);

        // N·∫øu ch∆∞a c√≥ swap n√†o, ch·ªâ h·ªßy booking th√¥i
        if (swap == null) {
            booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
            booking.setCancellationReason("Staff h·ªßy booking (ch∆∞a ph√°t sinh swap).");
            bookingRepository.save(booking);
            return Map.of(
                    "bookingId", bookingId,
                    "status", "CANCELLED",
                    "message", "ƒê√£ h·ªßy booking #" + bookingId + " (ch∆∞a c√≥ swap)."
            );
        }

        // C√≥ swap, rollback pin n·∫øu ƒë·ªß th√¥ng tin
        String batteryOutId = swap.getBatteryOutId();
        String batteryInId = swap.getBatteryInId();

        if (batteryOutId == null || batteryInId == null) {
            booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
            booking.setCancellationReason("Staff h·ªßy booking #" + bookingId + " (thi·∫øu th√¥ng tin pin).");
            swap.setStatus(Swap.SwapStatus.CANCELLED);
            swap.setDescription("H·ªßy swap theo booking (thi·∫øu th√¥ng tin pin).");

            bookingRepository.save(booking);
            swapRepository.save(swap);
            return Map.of(
                    "bookingId", bookingId,
                    "status", "CANCELLED",
                    "message", "ƒê√£ h·ªßy booking #" + bookingId + " do thi·∫øu th√¥ng tin pin."
            );
        }

        // Rollback pinOut v·ªÅ slot tr·ªëng
        Battery batteryOut = batteryRepository.findById(batteryOutId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pinOut: " + batteryOutId));
        Battery batteryIn = batteryRepository.findById(batteryInId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pinIn: " + batteryInId));

        DockSlot emptySlot = dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(
                        booking.getStation().getStationId())
                .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n slot tr·ªëng ƒë·ªÉ tr·∫£ pinOut."));

        emptySlot.setBattery(batteryOut);
        emptySlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);

        batteryOut.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
        batteryOut.setStationId(booking.getStation().getStationId());
        batteryOut.setDockSlot(emptySlot);

        batteryIn.setDockSlot(null);
        batteryIn.setStationId(null);
        batteryIn.setBatteryStatus(Battery.BatteryStatus.IN_USE);

        batteryRepository.save(batteryOut);
        batteryRepository.save(batteryIn);
        dockSlotRepository.save(emptySlot);

        booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
        booking.setCancellationReason("Staff h·ªßy booking #" + bookingId + " (ƒë√£ rollback pin).");
        swap.setStatus(Swap.SwapStatus.CANCELLED);
        swap.setDescription("H·ªßy swap theo booking, rollback pin th√†nh c√¥ng.");

        bookingRepository.save(booking);
        swapRepository.save(swap);

        return Map.of(
                "bookingId", bookingId,
                "status", "CANCELLED",
                "message", "ƒê√£ h·ªßy booking #" + bookingId + " v√† rollback pin th√†nh c√¥ng."
        );
    }


    // ====================== COMMIT SWAP ======================
    @Transactional
    public Object commitSwap(SwapRequest request) {
        Booking booking = bookingRepository.findById(request.getBookingId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y booking ID: " + request.getBookingId()));

        if (booking.getBookingStatus() == Booking.BookingStatus.COMPLETED) {
            throw new IllegalStateException("Booking ƒë√£ ho√†n th√†nh, kh√¥ng th·ªÉ swap l·∫°i.");
        }

        List<String> batteryInIds = request.getBatteryInIds();
        if (batteryInIds == null || batteryInIds.isEmpty()) {
            throw new IllegalArgumentException("Thi·∫øu th√¥ng tin pin kh√°ch ƒë∆∞a.");
        }

        Integer requiredCount = (booking.getBatteryCount() != null && booking.getBatteryCount() > 0)
                ? booking.getBatteryCount() : 1;

        if (batteryInIds.size() != requiredCount) {
            throw new IllegalArgumentException("S·ªë l∆∞·ª£ng pin nh·∫≠p kh√¥ng kh·ªõp v·ªõi booking y√™u c·∫ßu (" + requiredCount + ").");
        }

        // Ki·ªÉm tra model t·∫•t c·∫£ pinIn tr∆∞·ªõc khi swap
        for (String batteryInId : batteryInIds) {
            Battery battery = batteryRepository.findById(batteryInId)
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pin #" + batteryInId));

            if (battery.getBatteryType() == null) {
                throw new IllegalStateException("Pin " + batteryInId + " ch∆∞a x√°c ƒë·ªãnh lo·∫°i model.");
            }

            if (!battery.getBatteryType().name().equalsIgnoreCase(booking.getBatteryType())) {
                throw new IllegalStateException("Pin " + batteryInId + " kh√°c model (" +
                        battery.getBatteryType().name() + " ‚â† " + booking.getBatteryType() + "). Vui l√≤ng h·ªßy swap ho·∫∑c ch·ªçn pin ƒë√∫ng model.");
            }
        }

        long availableCount = dockSlotRepository.countByDock_Station_StationIdAndBattery_BatteryStatus(
                booking.getStation().getStationId(), Battery.BatteryStatus.AVAILABLE);

        if (availableCount < requiredCount) {
            throw new IllegalStateException("Kh√¥ng ƒë·ªß pin ƒë·∫ßy kh·∫£ d·ª•ng ƒë·ªÉ swap.");
        }

        String currentStaffUserId = resolveStaffUserId(request);
        boolean staffInStation = staffAssignRepository.existsByStationIdAndUser_UserId(
                booking.getStation().getStationId(), currentStaffUserId);
        if (!staffInStation) {
            throw new IllegalStateException("Nh√¢n vi√™n kh√¥ng thu·ªôc tr·∫°m n√†y, kh√¥ng th·ªÉ th·ª±c hi·ªán swap.");
        }

        List<SwapResponseDTO> results = new ArrayList<>();
        for (String batteryInId : batteryInIds) {
            SwapService self = context.getBean(SwapService.class);
            SwapResponseDTO response = self.handleSingleSwap(booking, batteryInId, currentStaffUserId);
            results.add(response);
        }

        booking.setBookingStatus(Booking.BookingStatus.COMPLETED);
        booking.setCompletedTime(LocalDate.now());
        bookingRepository.save(booking);

        return results.size() == 1 ? results.get(0) : results;
    }

    // ====================== HANDLE SINGLE SWAP ======================
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    protected SwapResponseDTO handleSingleSwap(Booking booking, String batteryInId, String staffUserId) {
        Integer stationId = booking.getStation().getStationId();
        Battery batteryIn = batteryRepository.findById(batteryInId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pin kh√°ch ƒë∆∞a: " + batteryInId));

        if (!batteryIn.isActive())
            throw new IllegalStateException("Pin " + batteryInId + " b·ªã v√¥ hi·ªáu h√≥a.");
        if (batteryIn.getBatteryStatus() == Battery.BatteryStatus.MAINTENANCE)
            throw new IllegalStateException("Pin " + batteryInId + " ƒëang b·∫£o tr√¨.");

        // üîπ T√¨m dock c√≥ pin ƒë·∫ßy ƒë√∫ng model (pinOut)
        DockSlot dockOutSlot = dockSlotRepository
                .findFirstByDock_Station_StationIdAndBattery_BatteryTypeAndBattery_BatteryStatusAndSlotStatusOrderByDock_DockNameAscSlotNumberAsc(
                        stationId,
                        batteryIn.getBatteryType(),
                        Battery.BatteryStatus.AVAILABLE,
                        DockSlot.SlotStatus.OCCUPIED
                )
                .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n pin ƒë·∫ßy ƒë√∫ng model trong tr·∫°m."));

        Battery batteryOut = dockOutSlot.getBattery();
        if (batteryOut == null)
            throw new IllegalStateException("Slot ch·ª©a pinOut kh√¥ng h·ª£p l·ªá (kh√¥ng c√≥ pin).");


        String dockCode = dockOutSlot.getDock().getDockName() + dockOutSlot.getSlotNumber();

        // Nh·∫£ pinOut
        batteryOut.setBatteryStatus(Battery.BatteryStatus.IN_USE);
        batteryOut.setStationId(null);
        batteryOut.setDockSlot(null);
        dockOutSlot.setBattery(null);
        dockOutSlot.setSlotStatus(DockSlot.SlotStatus.EMPTY);

        // G·∫Øn pinIn v√†o l·∫°i ch√≠nh dock ƒë√≥
        batteryIn.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
        batteryIn.setStationId(stationId);
        batteryIn.setDockSlot(dockOutSlot);
        dockOutSlot.setBattery(batteryIn);
        dockOutSlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);

        // L∆∞u DB
        batteryRepository.save(batteryOut);
        batteryRepository.save(batteryIn);
        dockSlotRepository.save(dockOutSlot);

        // T·∫°o b·∫£n ghi swap
        Swap swap = Swap.builder()
                .booking(booking)
                .dockId(dockOutSlot.getDock().getDockId())
                .userId(booking.getUser().getUserId())
                .batteryOutId(batteryOut.getBatteryId())
                .batteryInId(batteryIn.getBatteryId())
                .staffUserId(staffUserId)
                .status(Swap.SwapStatus.SUCCESS)
                .dockOutSlot(dockCode)
                .dockInSlot(dockCode)
                .completedTime(LocalDateTime.now())
                .description("Swap ho√†n t·∫•t (pinIn v√†o ƒë√∫ng dock c·ªßa pinOut).")
                .build();

        swapRepository.save(swap);

        // Tr·∫£ v·ªÅ response nh∆∞ c≈©
        return SwapResponseDTO.builder()
                .swapId(swap.getSwapId())
                .status("SUCCESS")
                .message("Swap ho√†n t·∫•t (pinIn/pinOut c√πng dockSlot).")
                .bookingId(booking.getBookingId())
                .batteryOutId(batteryOut.getBatteryId())
                .batteryInId(batteryIn.getBatteryId())
                .dockOutSlot(dockCode)
                .dockInSlot(dockCode)
                .build();
    }


    // ====================== RESOLVE STAFF ID ======================
    private String resolveStaffUserId(SwapRequest request) {
        Authentication auth = SecurityContextHolder.getContext() != null
                ? SecurityContextHolder.getContext().getAuthentication()
                : null;

        if (auth != null && auth.isAuthenticated()) {
            String name = auth.getName();
            if (name != null && !"anonymousUser".equalsIgnoreCase(name)) {
                return name;
            }
        }

        if (request.getStaffUserId() != null && !request.getStaffUserId().isBlank()) {
            return request.getStaffUserId();
        }

        throw new IllegalStateException("Thi·∫øu staffUserId (ch∆∞a ƒëƒÉng nh·∫≠p staff ho·∫∑c kh√¥ng truy·ªÅn staffUserId).");
    }
}
