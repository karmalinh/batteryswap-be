package BatterySwapStation.service;

import BatterySwapStation.dto.StationResponseDTO;
import BatterySwapStation.entity.Battery;
import BatterySwapStation.entity.Dock;
import BatterySwapStation.entity.DockSlot;
import BatterySwapStation.entity.Station;
import BatterySwapStation.repository.StationRepository;
import BatterySwapStation.utils.GeoUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class StationService {

    private final StationRepository stationRepository;

    /**
     * ‚ö° Cache 5 ph√∫t: t·∫•t c·∫£ tr·∫°m k√®m dock + battery
     */
    @Cacheable("stations")
    public List<Station> getAllActiveStations() {
        System.out.println("‚è≥ Loading stations from DB...");
        return stationRepository.findAllWithBatteryDetails();
    }

    /**
     * üìç L·∫•y to√†n b·ªô tr·∫°m (d√πng cache s·∫µn c√≥)
     */
    public List<StationResponseDTO> getAllStations() {
        return getAllActiveStations().stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    /**
     * üìç L·∫•y chi ti·∫øt tr·∫°m theo ID
     */
    public StationResponseDTO getStationDetail(int id) {
        return getAllActiveStations().stream()
                .filter(s -> s.getStationId() == id)
                .findFirst()
                .map(this::mapToDTO)
                .orElseThrow(() -> new RuntimeException("Station not found: " + id));
    }

    /**
     * üîç L·∫•y danh s√°ch tr·∫°m trong b√°n k√≠nh radiusKm (km)
     */
    public List<StationResponseDTO> getNearbyStations(double lat, double lng, double radiusKm) {
        // ‚úÖ 1. D√πng bi·∫øn final ri√™ng ƒë·ªÉ tr√°nh l·ªói lambda
        final double radius = (radiusKm <= 0) ? 50 : radiusKm;

        // ‚úÖ 2. L·∫•y t·∫•t c·∫£ tr·∫°m t·ª´ cache (ƒë√£ bao g·ªìm battery, dock)
        List<Station> allStations = getAllActiveStations();

        // ‚úÖ 3. T√≠nh kho·∫£ng c√°ch, l·ªçc theo b√°n k√≠nh, s·∫Øp x·∫øp tƒÉng d·∫ßn
        return allStations.stream()
                .map(st -> {
                    double distance = GeoUtils.haversineKm(
                            lat, lng,
                            st.getLatitude().doubleValue(),
                            st.getLongitude().doubleValue()
                    );
                    StationResponseDTO dto = mapToDTO(st);
                    dto.setDistanceKm(distance);
                    return dto;
                })
                .filter(dto -> dto.getDistanceKm() <= radius)  // s·ª≠ d·ª•ng bi·∫øn final radius
                .sorted(Comparator.comparingDouble(StationResponseDTO::getDistanceKm))
                .collect(Collectors.toList());
    }

    private StationResponseDTO mapToDTO(Station station) {
        Set<String> seen = new HashSet<>();

        // ‚ö†Ô∏è b·ªè .filter(Battery::isActive) ƒë·ªÉ v·∫´n ƒë·∫øm ƒë∆∞·ª£c DAMAGED
        List<Battery> bats = Optional.ofNullable(station.getDocks())
                .orElseGet(Collections::emptySet)
                .stream()
                .filter(Objects::nonNull)
                .filter(Dock::isActive)                    // gi·ªØ l·ªçc dock active
                .flatMap(d -> Optional.ofNullable(d.getDockSlots())
                        .orElseGet(Collections::emptySet).stream())
                .filter(Objects::nonNull)
                .filter(DockSlot::isActive)                // gi·ªØ l·ªçc slot active
                .map(DockSlot::getBattery)
                .filter(Objects::nonNull)
                .filter(b -> b.getBatteryId()!=null && seen.add(b.getBatteryId())) // kh·ª≠ tr√πng
                .collect(Collectors.toList());

        // ‚úÖ Summary: ch·ªâ 3 tr·∫°ng th√°i, b·ªè IN_USE
        Map<String, Long> batterySummary = bats.stream()
                .filter(b -> b.getBatteryStatus()!=null)
                .filter(b -> b.getBatteryStatus()==Battery.BatteryStatus.AVAILABLE
                        || b.getBatteryStatus()==Battery.BatteryStatus.CHARGING
                        || b.getBatteryStatus()==Battery.BatteryStatus.DAMAGED)
                .collect(Collectors.groupingBy(
                        b -> b.getBatteryStatus().name(),
                        LinkedHashMap::new,
                        Collectors.counting()
                ));

        // ‚úÖ Types: ch·ªâ ƒë·∫øm lo·∫°i pin c√≥ th·ªÉ d√πng (AVAILABLE + CHARGING)
        Map<String, Long> batteryTypes = bats.stream()
                .filter(b -> b.getBatteryStatus()==Battery.BatteryStatus.AVAILABLE
                        || b.getBatteryStatus()==Battery.BatteryStatus.CHARGING)
                .filter(b -> b.getBatteryType()!=null)
                .collect(Collectors.groupingBy(
                        b -> b.getBatteryType().name(),
                        LinkedHashMap::new,
                        Collectors.counting()
                ));

        return new StationResponseDTO(
                station.getStationId(),
                station.getStationName(),
                station.getAddress(),
                station.getLatitude(),
                station.getLongitude(),
                station.isActive(),
                batterySummary,
                batteryTypes,
                null
        );
    }
}
